public class DateUtil {

    private DateUtil(){}

    /**
     * 时间序列转成日期时间
     * @param value
     * @return
     */
    public static DateTime getDateTime(double value) {
        Calendar calendar = new GregorianCalendar(1900, 0, -1);
        Date d = calendar.getTime();
        Date dd = DateUtils.addDays(d, (int) value);
        return new DateTime(dd.getTime());
    }


    /**
     * 时间序列转成时间
     * @param value
     * @return
     */
    public static Time getTime(double value) {
        DateTime dateTime = getPOIDate(value);
        return new Time(dateTime.toDate().getTime());
    }

    /**
     * 数字转时间
     * @param value
     * @return
     */
    public static Time getHHMMSSTime(String value){
        //转成整数
        int timeNum = Integer.parseInt(value);
        //时
        int h = timeNum / 10000;
        //分
        int m = timeNum /100 % 100;
        //秒
        int s = timeNum % 100;
        return new Time(new DateTime(2019,1,1,h,m,s).toDate().getTime());

    }

    /**
     * 带分隔符的数字转时间 例如 13:12:12
     * @param value
     * @return
     */
    public static Time getTimeWithSeparator(String value){
        String separator = "";
        if (3 == value.split(":").length){
            separator = ":";
        }
        if (3 == value.split(";").length){
            separator = ";";
        }
        if (3 == value.split("-").length){
            separator = "-";
        }
        if (3 == value.split("\\.").length){
            separator = ".";
        }
        if (3 == value.split("&").length){
            separator = "&";
        }
        if (3 == value.split(" ").length){
            separator = " ";
        }
        if (3 == value.split("|").length){
            separator = "|";
        }
        String format = String.format("HH%smm%ss", separator, separator);
        DateTimeFormatter formatter = DateTimeFormat.forPattern(format);
        return new Time(DateTime.parse(value, formatter).toDate().getTime());
    }


    /**
     * DataTime转String
     * @param dateTime
     * @param format
     * @return
     */
    public static String converDateTimeToStr(DateTime dateTime, String format){
        return dateTime.toString(format);
    }


    public static int daysBetweenTwoDate(Date date1, Date date2){
        if (null == date1 || null == date2){
            return 0;
        }
        DateTime dateTime1 = new DateTime(date1);
        DateTime dateTime2 = new DateTime(date2);
        if (date1.before(date2)){
            return new Period(dateTime2,dateTime1, PeriodType.days()).getDays();
        }else {
            return new Period(dateTime1,dateTime2, PeriodType.days()).getDays();
        }
    }

    /**
     * 将 Date 转换成LocalDate
     * atZone()方法返回在指定时区从此Instant生成的ZonedDateTime。
     * @param date
     * @return
     */
    public static LocalDate dateToLocalDate(Date date){
        Instant instant = date.toInstant();
        ZoneId zoneId = ZoneId.systemDefault();
        return instant.atZone(zoneId).toLocalDate();
    }

    /**
     * 将 Date 转换成LocalDateTime
     * atZone()方法返回在指定时区从此Instant生成的ZonedDateTime。
     * @param date
     * @return
     */
    public static LocalDateTime dateToLocalDateTime(Date date){
        Instant instant = date.toInstant();
        ZoneId zoneId = ZoneId.systemDefault();
        return instant.atZone(zoneId).toLocalDateTime();
    }


    public static void main(String[] args) throws Exception{
//        DateTime dateTime = getDateTime(42655.4251273148);
//        Time time = getTime(42655.4251273148);//43020.4251273148
//        System.out.println(dateTime);
//        System.out.println(time);
//        String result = converDateTimeToStr(dateTime, "yyyy-MM-dd HH:mm:ss");
//        System.out.println(result);
//        DateFormat df6 = new SimpleDateFormat("yyyyMMddHHmmss");
//        Date date6 = df6.parse("20151230145203");
//        //System.out.println("----------" + daysBetweenTwoDate(new Date(), date6));
//        System.out.println(date6);

        //Date date = new Date();
        //LocalDateTime dateTime = dateToLocalDateTime(date);
        //int hour = dateTime.getHour();
        //int min = dateTime.getMinute();
        //int second = dateTime.getSecond();
        //System.out.println("hour: " + hour + "->min: " + min + "->min: " + second);
        System.out.println(getPOIDate(0.9999884259));
    }

    public static DateTime getPOIDate(double value) {
        int wholeDays = (int) Math.floor(value);
        int millisecondsInDay = (int) ((value - (double) wholeDays) * 8.64E7D + 0.5D);
        Calendar calendar = new GregorianCalendar();
        short startYear = 1900;
        byte dayAdjust = -1;
        if (wholeDays < 61) {
            dayAdjust = 1;
        }
        calendar.set(startYear, 0, wholeDays + dayAdjust, 0, 0, 0);
        calendar.set(Calendar.MILLISECOND, millisecondsInDay);
        if (calendar.get(Calendar.MILLISECOND) == 0) {
            calendar.clear(Calendar.MILLISECOND);
        }
        Date date = calendar.getTime();
        return new DateTime(date.getTime());
    }

    /**
     * 判断两个日期是否为同一天
     * @param date1
     * @param date2
     * @return
     */
    public static boolean isSameDate(Date date1, Date date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date1);
        c2.setTime(date2);
        int y = c1.get(Calendar.YEAR);
        int m = c1.get(Calendar.MONTH);
        int d = c1.get(Calendar.DAY_OF_MONTH);
        int y1 = c2.get(Calendar.YEAR);
        int m1 = c2.get(Calendar.MONTH);
        int d1 = c2.get(Calendar.DAY_OF_MONTH);
        return (y == y1 && m == m1 && d == d1);
    }
}
